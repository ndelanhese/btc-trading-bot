openapi: 3.0.3
info:
  title: BTC Trading Bot API
  description: |
    API for managing Bitcoin trading operations, user authentication, and trading bot configurations.
    
    This API provides endpoints for:
    - User authentication and registration
    - LN Markets configuration management
    - Trading bot configuration (margin protection, take profit, entry automation, price alerts)
    - Trading operations (orders, positions, account balance)
    - Bot control (start, stop, status)
  version: 1.0.0
  contact:
    name: BTC Trading Bot Support
    email: support@btctradingbot.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.btctradingbot.com
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 1
        username:
          type: string
          description: Username
          example: "john_doe"
        email:
          type: string
          format: email
          description: User email
          example: "john@example.com"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - username
        - email
        - created_at
        - updated_at

    UserRegister:
      type: object
      properties:
        username:
          type: string
          description: Username for registration
          example: "john_doe"
        password:
          type: string
          description: Password for registration
          example: "securepassword123"
        email:
          type: string
          format: email
          description: User email
          example: "john@example.com"
      required:
        - username
        - password
        - email

    UserLogin:
      type: object
      properties:
        username:
          type: string
          description: Username for login
          example: "john_doe"
        password:
          type: string
          description: Password for login
          example: "securepassword123"
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    LNMarketsConfig:
      type: object
      properties:
        id:
          type: integer
          description: Configuration ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        api_key:
          type: string
          description: LN Markets API key
          example: "your_api_key_here"
        secret_key:
          type: string
          description: LN Markets secret key
          example: "your_secret_key_here"
        passphrase:
          type: string
          description: LN Markets passphrase
          example: "your_passphrase_here"
        is_testnet:
          type: boolean
          description: Whether to use testnet
          example: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MarginProtection:
      type: object
      properties:
        id:
          type: integer
          description: Configuration ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        is_enabled:
          type: boolean
          description: Whether margin protection is enabled
          example: true
        activation_distance:
          type: number
          format: float
          description: Distance from liquidation price to activate protection
          example: 0.1
        new_liquidation_distance:
          type: number
          format: float
          description: New liquidation distance to set
          example: 0.05
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TakeProfit:
      type: object
      properties:
        id:
          type: integer
          description: Configuration ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        is_enabled:
          type: boolean
          description: Whether take profit is enabled
          example: true
        daily_percentage:
          type: number
          format: float
          description: Daily percentage for take profit (e.g., 1.0 for 1%)
          example: 1.0
        last_update:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    EntryAutomation:
      type: object
      properties:
        id:
          type: integer
          description: Configuration ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        is_enabled:
          type: boolean
          description: Whether entry automation is enabled
          example: true
        amount_per_order:
          type: number
          format: float
          description: Amount per order in BTC
          example: 0.001
        margin_per_order:
          type: integer
          description: Margin per order in sats
          example: 10000
        number_of_orders:
          type: integer
          description: Number of orders to place
          example: 5
        filled_slots:
          type: integer
          description: Number of filled slots
          example: 2
        price_variation:
          type: number
          format: float
          description: Price variation between orders
          example: 100.0
        initial_price:
          type: number
          format: float
          description: Initial price for orders
          example: 50000.0
        take_profit_per_order:
          type: number
          format: float
          description: Take profit percentage per order
          example: 2.0
        operation_type:
          type: string
          description: Type of operation (long/short)
          example: "long"
        leverage:
          type: integer
          description: Leverage for orders
          example: 10
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PriceAlert:
      type: object
      properties:
        id:
          type: integer
          description: Configuration ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        is_enabled:
          type: boolean
          description: Whether price alert is enabled
          example: true
        min_price:
          type: number
          format: float
          description: Minimum price threshold
          example: 45000.0
        max_price:
          type: number
          format: float
          description: Maximum price threshold
          example: 55000.0
        check_interval:
          type: integer
          description: Check interval in seconds
          example: 300
        last_alert:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TradingOrder:
      type: object
      properties:
        id:
          type: integer
          description: Order ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        order_id:
          type: string
          description: External order ID
          example: "order_123456"
        type:
          type: string
          description: Order type
          example: "market"
        amount:
          type: number
          format: float
          description: Order amount in BTC
          example: 0.001
        price:
          type: number
          format: float
          description: Order price
          example: 50000.0
        leverage:
          type: integer
          description: Order leverage
          example: 10
        status:
          type: string
          description: Order status
          example: "open"
        take_profit_price:
          type: number
          format: float
          description: Take profit price
          example: 51000.0
        stop_loss_price:
          type: number
          format: float
          description: Stop loss price
          example: 49000.0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    BotStatus:
      type: object
      properties:
        is_running:
          type: boolean
          description: Whether the bot is currently running
          example: true
        status:
          type: string
          description: Bot status message
          example: "Bot is running and monitoring positions"

    AccountBalance:
      type: object
      properties:
        balance:
          type: number
          format: float
          description: Account balance in sats
          example: 1000000
        currency:
          type: string
          description: Currency
          example: "sats"

    Position:
      type: object
      properties:
        id:
          type: string
          description: Position ID
          example: "pos_123456"
        size:
          type: number
          format: float
          description: Position size
          example: 0.001
        price:
          type: number
          format: float
          description: Entry price
          example: 50000.0
        leverage:
          type: integer
          description: Position leverage
          example: 10
        side:
          type: string
          description: Position side (long/short)
          example: "long"
        status:
          type: string
          description: Position status
          example: "open"

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          description: Response message
          example: "Operation completed successfully"

    PriceUpdateRequest:
      type: object
      properties:
        price:
          type: number
          format: float
          description: New price value
          example: 51000.0
      required:
        - price

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request body"

paths:
  /health:
    get:
      summary: Health check
      description: Check if the API is running
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  message:
                    type: string
                    example: "BTC Trading Bot API is running"

  /api/auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/lnmarkets/config:
    get:
      summary: Get LN Markets configuration
      description: Retrieve the current LN Markets configuration for the authenticated user
      tags:
        - Configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LNMarketsConfig'
        '401':
          description: Unauthorized
        '404':
          description: Configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Set LN Markets configuration
      description: Create or update LN Markets configuration for the authenticated user
      tags:
        - Configuration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LNMarketsConfig'
      responses:
        '200':
          description: Configuration saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/margin-protection:
    get:
      summary: Get margin protection configuration
      description: Retrieve the current margin protection configuration
      tags:
        - Trading Configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarginProtection'
        '401':
          description: Unauthorized
        '404':
          description: Configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Set margin protection configuration
      description: Create or update margin protection configuration
      tags:
        - Trading Configuration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarginProtection'
      responses:
        '200':
          description: Configuration saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/take-profit:
    get:
      summary: Get take profit configuration
      description: Retrieve the current take profit configuration
      tags:
        - Trading Configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TakeProfit'
        '401':
          description: Unauthorized
        '404':
          description: Configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Set take profit configuration
      description: Create or update take profit configuration
      tags:
        - Trading Configuration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TakeProfit'
      responses:
        '200':
          description: Configuration saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/entry-automation:
    get:
      summary: Get entry automation configuration
      description: Retrieve the current entry automation configuration
      tags:
        - Trading Configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryAutomation'
        '401':
          description: Unauthorized
        '404':
          description: Configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Set entry automation configuration
      description: Create or update entry automation configuration
      tags:
        - Trading Configuration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryAutomation'
      responses:
        '200':
          description: Configuration saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/price-alert:
    get:
      summary: Get price alert configuration
      description: Retrieve the current price alert configuration
      tags:
        - Trading Configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceAlert'
        '401':
          description: Unauthorized
        '404':
          description: Configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Set price alert configuration
      description: Create or update price alert configuration
      tags:
        - Trading Configuration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceAlert'
      responses:
        '200':
          description: Configuration saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/orders:
    get:
      summary: Get trading orders
      description: Retrieve all trading orders for the authenticated user
      tags:
        - Trading Operations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TradingOrder'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/bot/start:
    post:
      summary: Start trading bot
      description: Start the trading bot for the authenticated user
      tags:
        - Bot Control
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Bot started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/bot/stop:
    post:
      summary: Stop trading bot
      description: Stop the trading bot for the authenticated user
      tags:
        - Bot Control
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Bot stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/bot/status:
    get:
      summary: Get bot status
      description: Get the current status of the trading bot
      tags:
        - Bot Control
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Bot status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotStatus'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/account/balance:
    get:
      summary: Get account balance
      description: Retrieve the current account balance from LN Markets
      tags:
        - Trading Operations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Balance retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalance'
        '401':
          description: Unauthorized
        '404':
          description: LN Markets configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/positions:
    get:
      summary: Get all positions
      description: Retrieve all open positions from LN Markets
      tags:
        - Trading Operations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Positions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Position'
        '401':
          description: Unauthorized
        '404':
          description: LN Markets configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/positions/{id}:
    get:
      summary: Get specific position
      description: Retrieve a specific position by ID
      tags:
        - Trading Operations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Position ID
          schema:
            type: string
          example: "pos_123456"
      responses:
        '200':
          description: Position retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
        '401':
          description: Unauthorized
        '404':
          description: Position or configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/positions/{id}/close:
    post:
      summary: Close position
      description: Close a specific position
      tags:
        - Trading Operations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Position ID
          schema:
            type: string
          example: "pos_123456"
      responses:
        '200':
          description: Position closed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
        '404':
          description: Position or configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/positions/{id}/take-profit:
    post:
      summary: Update take profit for position
      description: Update the take profit price for a specific position
      tags:
        - Trading Operations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Position ID
          schema:
            type: string
          example: "pos_123456"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceUpdateRequest'
      responses:
        '200':
          description: Take profit updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Position or configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/trading/positions/{id}/stop-loss:
    post:
      summary: Update stop loss for position
      description: Update the stop loss price for a specific position
      tags:
        - Trading Operations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Position ID
          schema:
            type: string
          example: "pos_123456"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceUpdateRequest'
      responses:
        '200':
          description: Stop loss updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Position or configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and registration
  - name: Configuration
    description: LN Markets configuration management
  - name: Trading Configuration
    description: Trading bot configuration settings
  - name: Bot Control
    description: Trading bot control operations
  - name: Trading Operations
    description: Trading operations and position management
